package main

import (
	"fmt"
	"strconv"
)

func main() {
	input := []uint64{0b010110011101,
		0b101100111000,
		0b100100000011,
		0b111000010001,
		0b001100010011,
		0b010000111100,
		0b001000100011,
		0b001000100111,
		0b010001111110,
		0b111101001011,
		0b011000101011,
		0b111100111001,
		0b100101111011,
		0b101100110110,
		0b101010111001,
		0b001111000110,
		0b001001101000,
		0b101011001010,
		0b011101111010,
		0b011101001010,
		0b011001000001,
		0b100001010000,
		0b111011001101,
		0b000111110111,
		0b010011001111,
		0b000111011001,
		0b111000010100,
		0b101001100100,
		0b110010001101,
		0b111110101000,
		0b011001100010,
		0b110010110101,
		0b010000001101,
		0b100000000100,
		0b110111011110,
		0b110001100110,
		0b001011110111,
		0b110000011110,
		0b110110101010,
		0b101001100110,
		0b010000001010,
		0b100010100100,
		0b101000111101,
		0b111000001011,
		0b000000100100,
		0b100111010110,
		0b010101011100,
		0b011111010100,
		0b100000001100,
		0b111000011110,
		0b010001001011,
		0b100110000101,
		0b001111111000,
		0b110110111001,
		0b011100010111,
		0b111011101001,
		0b100010101010,
		0b110110100101,
		0b101110110100,
		0b000110111011,
		0b100100000110,
		0b111011111101,
		0b111001111001,
		0b110011101000,
		0b100110111111,
		0b000010100010,
		0b011010010101,
		0b110101100001,
		0b000100100001,
		0b000111010000,
		0b001001000111,
		0b110111110101,
		0b000100010111,
		0b110000000111,
		0b101111011001,
		0b001010001100,
		0b000010001010,
		0b001010111100,
		0b110101111011,
		0b100101001110,
		0b000100101010,
		0b101110001110,
		0b110110010010,
		0b110100000000,
		0b001000101110,
		0b110111110000,
		0b001111011100,
		0b111010000000,
		0b101000100100,
		0b010010111101,
		0b110110111000,
		0b001001100101,
		0b010111110111,
		0b010010001010,
		0b000100011100,
		0b001111110011,
		0b000100101110,
		0b011000010010,
		0b111000000011,
		0b001110100110,
		0b110111110001,
		0b011111110100,
		0b010010001101,
		0b011000100101,
		0b110011011110,
		0b100110101001,
		0b100101010111,
		0b010100010111,
		0b101101110001,
		0b011101110111,
		0b110101011000,
		0b001100101011,
		0b110101100011,
		0b110100101011,
		0b000110101100,
		0b101100110111,
		0b111101011011,
		0b000001100010,
		0b010010101100,
		0b110001001001,
		0b111111100001,
		0b110111010111,
		0b101100001011,
		0b000100011110,
		0b000011101010,
		0b101011000110,
		0b101011110011,
		0b010101001100,
		0b100011111011,
		0b111111001001,
		0b000100111001,
		0b011011011000,
		0b100001110000,
		0b000001011100,
		0b101100101010,
		0b011110110011,
		0b111111101001,
		0b000000100010,
		0b111111001000,
		0b001110000110,
		0b100000100100,
		0b001111001000,
		0b001100101100,
		0b001001100100,
		0b010010100010,
		0b110111101101,
		0b111011100100,
		0b110001111001,
		0b101111101011,
		0b000110100001,
		0b010011111011,
		0b110101010100,
		0b100000111111,
		0b110101010010,
		0b110101100111,
		0b001011111000,
		0b100110011000,
		0b100100010111,
		0b101110101001,
		0b110110110111,
		0b001000011001,
		0b100010111011,
		0b000011010010,
		0b111111100110,
		0b011101011001,
		0b101101011000,
		0b101011101101,
		0b101101100001,
		0b111001000110,
		0b000011010011,
		0b110111001100,
		0b000100010110,
		0b010110001001,
		0b000110110101,
		0b100010001011,
		0b000010001001,
		0b111001100110,
		0b011100101001,
		0b111010010001,
		0b000000011110,
		0b101111000110,
		0b111110001010,
		0b100001111010,
		0b000011110111,
		0b011100000010,
		0b011110000010,
		0b010010001011,
		0b110010000100,
		0b011101011101,
		0b000010110101,
		0b010111111110,
		0b010110000011,
		0b111100101011,
		0b101000111110,
		0b011101110110,
		0b101000100101,
		0b000110010001,
		0b010010001001,
		0b001001011001,
		0b100000101100,
		0b000100011111,
		0b101100001101,
		0b100111000100,
		0b011111000101,
		0b011000000011,
		0b100101100000,
		0b100111011000,
		0b111110011111,
		0b001111001010,
		0b000100100101,
		0b001111010011,
		0b000111100010,
		0b001100010100,
		0b111111001100,
		0b110000100001,
		0b000001011010,
		0b001001101101,
		0b101111101110,
		0b110100111101,
		0b010001110011,
		0b000011000111,
		0b011010100111,
		0b111110101001,
		0b111011111110,
		0b010110100001,
		0b001111000100,
		0b100010110111,
		0b101101100100,
		0b111110011000,
		0b000111101101,
		0b010111001010,
		0b000010110111,
		0b011100100100,
		0b001110100100,
		0b000111101110,
		0b100110110111,
		0b110010110100,
		0b001011000011,
		0b100010100011,
		0b111011100010,
		0b011001001000,
		0b111100000011,
		0b011110110000,
		0b110101011011,
		0b001011110000,
		0b110100110010,
		0b100111011001,
		0b101100010100,
		0b001011010111,
		0b011101011000,
		0b110000001010,
		0b101001010100,
		0b010111011011,
		0b001000010101,
		0b001100111001,
		0b010000001001,
		0b101001000000,
		0b101101100101,
		0b110101111111,
		0b011010001011,
		0b111101111000,
		0b111000110011,
		0b000001000011,
		0b110101110110,
		0b111101100001,
		0b000111000001,
		0b000111000011,
		0b100111101101,
		0b100101001111,
		0b101010000010,
		0b001010001110,
		0b000101110001,
		0b001010000101,
		0b101001001100,
		0b001110100001,
		0b110010011001,
		0b111110000000,
		0b100100010010,
		0b010011011111,
		0b001101010001,
		0b000110101000,
		0b010101101000,
		0b000010100001,
		0b010110010011,
		0b000001001010,
		0b100011100110,
		0b101001010011,
		0b001000011101,
		0b000000110001,
		0b100010000110,
		0b010110010101,
		0b100001110110,
		0b010010010010,
		0b010001000000,
		0b110011001010,
		0b010011011001,
		0b111101101001,
		0b000110111001,
		0b001101110101,
		0b000010110110,
		0b000101001011,
		0b000110000000,
		0b001100001001,
		0b100100111000,
		0b110100010101,
		0b000110001010,
		0b110100110011,
		0b011101001100,
		0b001000000111,
		0b010100101001,
		0b100011011100,
		0b000001100001,
		0b000000001011,
		0b110000100010,
		0b001111110111,
		0b111001011110,
		0b011100010110,
		0b100010011011,
		0b100000010000,
		0b111100100101,
		0b100011011001,
		0b000001101111,
		0b100111010011,
		0b011001100101,
		0b010101101001,
		0b110010110111,
		0b100111111111,
		0b111010111101,
		0b000101000110,
		0b100101001011,
		0b000001011011,
		0b000111001100,
		0b011000101010,
		0b101010000100,
		0b101001100000,
		0b100111101000,
		0b101000001111,
		0b010110010111,
		0b000011010110,
		0b011011010111,
		0b010000101000,
		0b011110010001,
		0b101010001101,
		0b110100011111,
		0b010100011010,
		0b101110100101,
		0b101101111101,
		0b001110011010,
		0b100001110101,
		0b011011011101,
		0b011110011110,
		0b110110001110,
		0b110000000100,
		0b101010011011,
		0b101101111001,
		0b011110101010,
		0b001110000011,
		0b101001110111,
		0b101010110111,
		0b000011001000,
		0b011010100010,
		0b000101101101,
		0b000101000001,
		0b000101011110,
		0b010011101000,
		0b011001111110,
		0b101111000011,
		0b111001010011,
		0b001010000111,
		0b001100000111,
		0b000101101000,
		0b001111100011,
		0b000001000101,
		0b010000010010,
		0b010110011011,
		0b011011010000,
		0b111001010000,
		0b100111010001,
		0b011110001111,
		0b010011000101,
		0b010111111010,
		0b001111001011,
		0b000000001111,
		0b011010011101,
		0b111110000111,
		0b000101001101,
		0b111000110101,
		0b100011101110,
		0b011100011001,
		0b010100010100,
		0b011001000111,
		0b011101000001,
		0b110011111111,
		0b100011010001,
		0b101100100110,
		0b001011001010,
		0b110000000000,
		0b111011101010,
		0b111010110001,
		0b100101110001,
		0b011001110000,
		0b001110010000,
		0b111010001110,
		0b010101100111,
		0b000000100101,
		0b100111001110,
		0b001001001101,
		0b100101110100,
		0b101110000000,
		0b101001111111,
		0b101100001100,
		0b011110011001,
		0b010011100101,
		0b000001100110,
		0b010000111111,
		0b011001010011,
		0b011011000110,
		0b000000010001,
		0b001100010111,
		0b000111100011,
		0b011111001111,
		0b010111101111,
		0b101111011011,
		0b110101110000,
		0b011001001101,
		0b001101011110,
		0b000110011110,
		0b110010000111,
		0b111111100111,
		0b010101001101,
		0b111111000000,
		0b001001011111,
		0b010110000100,
		0b111111000110,
		0b010011000110,
		0b010111101000,
		0b111010111100,
		0b111111111001,
		0b011011000010,
		0b001101110111,
		0b000001111100,
		0b111001101110,
		0b111111101110,
		0b000001111101,
		0b001101011001,
		0b100111000011,
		0b110001010111,
		0b011001010010,
		0b011110111110,
		0b110100111110,
		0b011100001011,
		0b010010111000,
		0b001101100101,
		0b111001111110,
		0b101011001111,
		0b011010010001,
		0b011100101010,
		0b000010111010,
		0b000101100100,
		0b110100110110,
		0b010010110000,
		0b110111010011,
		0b010110000000,
		0b111100010100,
		0b010110110011,
		0b001001111000,
		0b110000101001,
		0b101110010111,
		0b011001111001,
		0b101001100011,
		0b111011101101,
		0b100011000001,
		0b010000011010,
		0b000111111101,
		0b111000101110,
		0b000100001101,
		0b101000100010,
		0b001001011101,
		0b100010010011,
		0b011010100000,
		0b101111100010,
		0b000010000011,
		0b101101011111,
		0b111111000001,
		0b110001000100,
		0b011000111011,
		0b111101011001,
		0b010011111111,
		0b010011001001,
		0b000110010000,
		0b001110101001,
		0b111101000000,
		0b011111011011,
		0b010000011110,
		0b101101011101,
		0b110011110000,
		0b001111100000,
		0b011011010101,
		0b110010011011,
		0b001110010110,
		0b010100011100,
		0b000001111001,
		0b111000101011,
		0b101011010001,
		0b101100101000,
		0b111000001001,
		0b010010000111,
		0b001000101010,
		0b101000010111,
		0b000001101011,
		0b001011111111,
		0b010011111010,
		0b111001011101,
		0b101111001010,
		0b010011011110,
		0b001111010000,
		0b011001101110,
		0b101011100100,
		0b010010011101,
		0b101010010010,
		0b011001000011,
		0b101000000011,
		0b110101001101,
		0b011111000000,
		0b010000010001,
		0b111100011010,
		0b101100011110,
		0b000001010001,
		0b110101101101,
		0b010001000100,
		0b100001001001,
		0b100100000001,
		0b101111101010,
		0b111101010001,
		0b001010011000,
		0b100010101110,
		0b000100010001,
		0b010011010110,
		0b110000111001,
		0b100001100110,
		0b100110110011,
		0b000010111011,
		0b010110001100,
		0b010001100100,
		0b101100001111,
		0b001001101111,
		0b000011111001,
		0b010111010011,
		0b011001101000,
		0b111011001000,
		0b110111000000,
		0b111000011101,
		0b011101100011,
		0b010001100000,
		0b100111101100,
		0b001010110000,
		0b000001101110,
		0b101000111011,
		0b100111110010,
		0b100111001011,
		0b110001110101,
		0b000001111011,
		0b001110101011,
		0b000110001001,
		0b010001000101,
		0b111000101001,
		0b000101010001,
		0b011011011110,
		0b110000011111,
		0b011111111011,
		0b011100111100,
		0b101010011001,
		0b101001111101,
		0b101101001100,
		0b010101101111,
		0b100010001100,
		0b100101111111,
		0b010000111001,
		0b110110000000,
		0b111110111011,
		0b011110101000,
		0b000011011111,
		0b100000011110,
		0b001101110011,
		0b010001010001,
		0b010011000100,
		0b110001110001,
		0b110010011100,
		0b011101110000,
		0b100101011110,
		0b010100100001,
		0b110110101100,
		0b100100111101,
		0b100111011111,
		0b011111101000,
		0b101101000101,
		0b000001110101,
		0b010100011111,
		0b101011000100,
		0b001010011111,
		0b110100010111,
		0b010010101011,
		0b100111100101,
		0b011010101010,
		0b011101111100,
		0b110100100110,
		0b011110001110,
		0b110101011110,
		0b100101100100,
		0b001110001011,
		0b001101110001,
		0b010011110111,
		0b111100000111,
		0b100100101011,
		0b110010101100,
		0b001101110000,
		0b001001110110,
		0b101111000111,
		0b011010000001,
		0b110010100110,
		0b111010110011,
		0b100110001101,
		0b101101101101,
		0b101110011110,
		0b001110001100,
		0b010101000110,
		0b100101001001,
		0b110010101111,
		0b100101001101,
		0b111100000110,
		0b010000011100,
		0b001010011011,
		0b100000110110,
		0b001101010111,
		0b100110100100,
		0b000011101101,
		0b100111000000,
		0b111000100110,
		0b000101110101,
		0b110111000100,
		0b011011100110,
		0b110100110101,
		0b110000010100,
		0b000111011101,
		0b010110101011,
		0b100010011001,
		0b011010110011,
		0b101010010101,
		0b101001110110,
		0b110101111000,
		0b110001111111,
		0b101101110011,
		0b101000010101,
		0b101000010001,
		0b011111110101,
		0b010001000001,
		0b100100111110,
		0b100110101011,
		0b101101100110,
		0b111100100100,
		0b010000010011,
		0b100110100000,
		0b000000000010,
		0b110101000101,
		0b000101000000,
		0b000010101001,
		0b100110100010,
		0b011000110110,
		0b100001001011,
		0b100111011011,
		0b011000001101,
		0b011001100001,
		0b101000010011,
		0b010101010010,
		0b100100110000,
		0b110111100000,
		0b011110111000,
		0b001011010101,
		0b111111000111,
		0b111111010100,
		0b001100011010,
		0b000000111100,
		0b101111100111,
		0b111110110101,
		0b001000001111,
		0b011100011000,
		0b001011111001,
		0b110111010101,
		0b010001111000,
		0b001110110101,
		0b011000101000,
		0b011100101100,
		0b000100000000,
		0b100101101100,
		0b101010101001,
		0b100101000101,
		0b100001101110,
		0b011001011111,
		0b011010101100,
		0b110111011010,
		0b110111010100,
		0b010011000111,
		0b101011010110,
		0b001101001001,
		0b110111011100,
		0b111001001111,
		0b010100100011,
		0b101101111010,
		0b101110110110,
		0b111011100110,
		0b000000101110,
		0b001101100011,
		0b110000001111,
		0b100111010100,
		0b000011111110,
		0b100111001010,
		0b111011111100,
		0b111101001111,
		0b001101111011,
		0b110110010101,
		0b100111110100,
		0b100001110100,
		0b111001100100,
		0b000010110011,
		0b011111111101,
		0b010000100011,
		0b001110011110,
		0b111010101010,
		0b000111111110,
		0b100100000010,
		0b100110101110,
		0b100101111010,
		0b001110011011,
		0b011011111000,
		0b011100010101,
		0b000111001110,
		0b100101011100,
		0b001010101011,
		0b001100110010,
		0b100011000100,
		0b101000101110,
		0b110000111100,
		0b110111001010,
		0b011111011100,
		0b011001011110,
		0b001111010110,
		0b100101100110,
		0b111101100110,
		0b001100001010,
		0b001010010110,
		0b000101001010,
		0b001100110011,
		0b111000110001,
		0b001001010101,
		0b000000001101,
		0b011111001100,
		0b101010011000,
		0b100100011001,
		0b001100100111,
		0b101010110000,
		0b101010100111,
		0b011100101000,
		0b010010010001,
		0b001111011001,
		0b111110100110,
		0b101110110101,
		0b101101110100,
		0b101011111111,
		0b000001111110,
		0b110000000011,
		0b000111010011,
		0b001000000110,
		0b010111001001,
		0b000011001011,
		0b110101110100,
		0b110000110000,
		0b111101001101,
		0b101101011010,
		0b001010110001,
		0b101011100111,
		0b011000000100,
		0b111011111111,
		0b110000010111,
		0b110001011111,
		0b011111001011,
		0b011011000011,
		0b011100111111,
		0b110000101100,
		0b001001110011,
		0b000000111001,
		0b010011101101,
		0b111001010111,
		0b100110000110,
		0b001000001011,
		0b110011100001,
		0b001011010010,
		0b111110110100,
		0b000000111011,
		0b111011101011,
		0b000100110100,
		0b110001100111,
		0b011110100001,
		0b101000000001,
		0b100100101101,
		0b000101010011,
		0b000011000110,
		0b100110111001,
		0b011100101110,
		0b000100100111,
		0b011110011100,
		0b110100001111,
		0b100011001000,
		0b000001001100,
		0b010110101000,
		0b100101000000,
		0b111001101011,
		0b111011010110,
		0b000000011001,
		0b110110000101,
		0b001100000101,
		0b010000100001,
		0b100011101101,
		0b010001000011,
		0b011010111110,
		0b010010101110,
		0b000101110100,
		0b000010010011,
		0b010110010100,
		0b001110011000,
		0b101000001100,
		0b110001101001,
		0b100111110001,
		0b101111100110,
		0b000011011011,
		0b010011010101,
		0b111010111110,
		0b000011101000,
		0b010111001110,
		0b100100011011,
		0b010000010111,
		0b111011100111,
		0b110011010111,
		0b010100100100,
		0b010001011111,
		0b001011111100,
		0b110101001100,
		0b010001011010,
		0b010100110111,
		0b100010000000,
		0b101010110100,
		0b100010111001,
		0b000011000011,
		0b001101101111,
		0b000100101000,
		0b100001101101,
		0b110001000101,
		0b110001100000,
		0b111110001100,
		0b101010010100,
		0b001101111100,
		0b011000010110,
		0b011111000111,
		0b111001010010,
		0b100100011101,
		0b111111111000,
		0b111111111110,
		0b000101110010,
		0b010011111001,
		0b000011110011,
		0b101101000010,
		0b010001001010,
		0b000000000111,
		0b001001110010,
		0b110100011001,
		0b011000001100,
		0b111110001101,
		0b100010000111,
		0b101111100101,
		0b110010000101,
		0b010100110100,
		0b001101011000,
		0b100110111000,
		0b100011100011,
		0b110110011111,
		0b111011011010,
		0b000001011101,
		0b010101010000,
		0b111011010011,
		0b111100110110,
		0b001100010001,
		0b110011101111,
		0b110100111000,
		0b010111011100,
		0b100111101010,
		0b110011000111,
		0b110011011100,
		0b110111111100,
		0b011000000101,
		0b011111001010,
		0b010100011011,
		0b001000101001,
		0b101101011011,
		0b101001010000,
		0b000110111010,
		0b000110100101,
		0b010110000110,
		0b100000100010,
		0b000010000010,
		0b110111111001,
		0b001011010110,
		0b100011010101,
		0b011100000011,
		0b111000111011,
		0b010011001101,
		0b111000100001,
		0b001101010101,
		0b001110010010,
		0b100110011110,
		0b001111101001,
		0b000011111010,
		0b110101000110,
		0b101101000000,
		0b010110100011,
		0b011100111010,
		0b011011110001,
		0b000100111110,
		0b000001011000,
		0b010111101100,
		0b100100110110,
		0b101100011001,
		0b011101011110,
		0b100000100001,
		0b011110100010,
		0b000001010000,
		0b101110010010,
		0b010101111001,
		0b100101100111,
		0b010111100101,
		0b111010110000,
		0b001001010011,
		0b100101000010,
		0b011000110011,
		0b101001101001,
		0b110001011110,
		0b010000111000,
		0b000001010110,
		0b010101011011,
		0b011000010000,
		0b101111010000,
		0b011011110011,
		0b001010011101,
		0b100010111100,
		0b011110011101,
		0b010110100111,
		0b110100011100,
		0b010101001110,
		0b001110111111,
		0b011000110111,
		0b101100001010,
		0b011000010111,
		0b100011010000,
		0b011001110101,
		0b100100001000,
		0b100110000000,
		0b000111111001,
		0b011001010000,
		0b011111010011,
		0b001101011011,
		0b001001111101,
		0b000000101000,
		0b110001101000,
		0b101100001000,
		0b011010011110,
		0b001110000101,
		0b010010100111,
		0b101110111000,
		0b000110110110,
		0b011111100100,
		0b101010000101,
		0b101100100101,
		0b101001111000,
		0b001001101011,
		0b110001111100,
		0b011110111011,
		0b010100111001,
		0b011001111000,
		0b101110100011,
		0b111000111110,
		0b000100000111,
		0b100001101001,
		0b110100001110,
		0b000110011000,
		0b001011001011,
		0b010001111010,
		0b100100100100,
		0b100011010010,
		0b001110001111,
		0b000101101110,
		0b111000101100,
		0b111001110000}

	mask := uint64(0b000000000001)
	maskFull := uint64(0b111111111111)
	bitlen := 12
	gamma := uint64(0)
	count := uint(0)
	halfLen := uint(len(input)) / uint(2)
	var temp uint64
	for i := 0; i < bitlen; i++ {
		fmt.Println("Current Mask", strconv.FormatUint(mask, 2))
		count = 0
		for _, v := range input {
			temp = v & mask
			if temp != 0 {
				count++
			}
		}
		if count > halfLen {
			gamma |= mask
		}
		mask = mask << 0b1
	}
	epsilon := maskFull ^ gamma
	fmt.Println(gamma, epsilon)
	fmt.Println(strconv.FormatUint(gamma, 2), strconv.FormatUint(epsilon, 2))
	fmt.Println("result: ", gamma*epsilon)
}
